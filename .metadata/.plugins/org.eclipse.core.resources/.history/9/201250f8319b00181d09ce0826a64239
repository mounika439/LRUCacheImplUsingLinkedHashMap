package com.deloitte.utility;


import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;

import com.deloitte.cache.LRUCache;

public class MainUtility {
	
	
	public static void main(String[] args) {
		LRUCache<String, String> cache = LRUCache.newInstance(3);
		
		// TODO Auto-generated method stub
		String nameStr = "Sridhar";
		String output = encryptNameHelper(nameStr,cache);
		
		nameStr = "Amin";
		output = encryptNameHelper(nameStr,cache);
		
		nameStr = "Amin";
		output = encryptNameHelper(nameStr,cache);
		
		nameStr = "Rohith";
		output = encryptNameHelper(nameStr,cache);
		
		nameStr = "Mounika";
		output = encryptNameHelper(nameStr,cache);
		
		nameStr = "Prashanth";
		output = encryptNameHelper(nameStr,cache);
		
		nameStr = "ar#Kum";
		
		System.out.println("######"+decryptNameHelper(nameStr, cache));
		
		
		
		Set<Entry<String, String>> entrySet = cache.entrySet();
		for (Entry<String, String> entry : entrySet) {
			String employee = entry.getKey();
			String department = entry.getValue();
			System.out.println(employee);
			System.out.println(department);
		}
		
	}
	
	public static String encryptNameHelper(String name,LRUCache<String, String> cache){
		
		if(cache.containsKey(name)){
			System.out.println(name+" is found in the cache");
			return cache.get(name);
		}else{
			String decryptName = encryptName(name);
			System.out.println("Adding to the cache "+name);
			
			cache.put(name, decryptName);
			return decryptName;
		}
	}
	
	public static String decryptNameHelper(String dName,LRUCache<String, String> cache){
		
		if(cache.containsValue(dName)){
			System.out.println(dName +"  found in cache");
			return getKeyFromValue(cache,dName);
			
		}
		String source = decryptName(dName);
		cache.put(source, dName);
		return source;
	}
	
	
	public static String getKeyFromValue(LinkedHashMap<String, String> map,String val){
		Iterator<Map.Entry<String,String>> it;
		Entry<String,String> entry;
		
		
		it = map.entrySet().iterator();
		
		while(it.hasNext()){
			entry = it.next();
			if(entry.getValue().equals(val)){
				return entry.getKey();
			}
		}
		return null;
	}
	
	
	public static String encryptName(String sourceName){
		
		StringBuilder resStr = new StringBuilder();
		
		int len = sourceName.length();
		Character ch = '#';
		
		if(len%2 != 0){
			sourceName = sourceName +ch;
		}
		
		int mid = sourceName.length()/2;
		resStr.append(sourceName.substring(mid));
		resStr.append(sourceName.substring(0,mid));
		
		sourceName = sourceName.replace("#", "");
		return resStr.toString();
		
	}
	
	public static String decryptName(String decryptName){
		StringBuilder resStr = new StringBuilder();
		String secondhalf = decryptName.substring(decryptName.length()/2);
		String firsthalf = decryptName.substring(0, decryptName.length()/2);
		firsthalf = firsthalf.replace("#","");
		System.out.println(firsthalf);
		resStr.append(secondhalf);
		resStr.append(firsthalf);
		
		return resStr.toString();
		
	}
}
